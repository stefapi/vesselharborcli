{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/login": {
      "post": {
        "summary": "Authenticate a user",
        "description": "Authenticates a user with their email and password and returns an access token",
        "operationId": "login_login_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect email or password"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "summary": "Log out",
        "description": "Logs out the user by deleting authentication cookies",
        "operationId": "logout_logout_post",
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/refresh-token": {
      "post": {
        "summary": "Renew token",
        "description": "Renews the access token from a valid refresh token",
        "operationId": "refresh_token_refresh_token_post",
        "responses": {
          "200": {
            "description": "Token renewed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired refresh token, or is not a refresh token"
          }
        }
      }
    },
    "/me": {
      "get": {
        "summary": "Connected user profile",
        "description": "Retrieves the profile information of the currently connected user",
        "operationId": "get_me_me_get",
        "responses": {
          "200": {
            "description": "Profile information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated or invalid token"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ]
      }
    },
    "/users/reset_password_request": {
      "post": {
        "summary": "Request password reset",
        "description": "Sends an email containing a password reset link to the provided email address",
        "operationId": "reset_password_request_users_reset_password_request_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reset link sent by email (if the email is registered)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/reset_password": {
      "post": {
        "summary": "Reset password",
        "description": "Resets a user's password using a valid reset token",
        "operationId": "reset_password_users_reset_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordReset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid, expired or incorrect token"
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a user in free mode",
        "description": "Creates a new user in free mode in the system. The first user created automatically becomes superadmin.",
        "operationId": "register_user_users_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_UserOut_"
                }
              }
            }
          },
          "400": {
            "description": "Email already registered"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "users"
        ],
        "summary": "List users",
        "description": "Retrieves the list of users with pagination and optional filtering by email.",
        "operationId": "list_users_users_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_UserOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{organization_id}": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a user",
        "description": "Creates a new user in the system. It is attached to an Organization",
        "operationId": "create_user_users__organization_id__post",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Organization Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_UserOut_"
                }
              }
            }
          },
          "400": {
            "description": "Email already registered"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get a user",
        "description": "Retrieves detailed information of a specific user by their ID.",
        "operationId": "get_user_users__user_id__get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_UserOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update user information",
        "description": "Modifies the personal information of an existing user (last name, first name, email, username).",
        "operationId": "update_user_users__user_id__put",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_UserOut_"
                }
              }
            }
          },
          "400": {
            "description": "Update failed"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Modification not authorized"
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete a user",
        "description": "Permanently deletes a user from the system. A user cannot delete themselves, and the last superadmin cannot be deleted.",
        "operationId": "delete_user_users__user_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "400": {
            "description": "You cannot delete yourself or other deletion restriction"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Modification not authorized"
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/password": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Change password",
        "description": "Allows a user to change their own password or an administrator to reset another user's password.",
        "operationId": "change_password_users__user_id__password_put",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect passwords"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Modification not authorized"
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/superadmin": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Modify superadmin status",
        "description": "Allows a superadmin to modify another user's superadmin status. A superadmin cannot modify their own status, and the last superadmin cannot be demoted.",
        "operationId": "change_superadmin_users__user_id__superadmin_put",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeSuperadmin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "400": {
            "description": "Cannot remove last superadmin"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Modification not authorized"
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/groups": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "User groups",
        "description": "Retrieves the list of groups the user belongs to.",
        "operationId": "list_user_groups_users__user_id__groups_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Groups retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_GroupOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Read not authorized"
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/policies": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "User policies",
        "description": "Retrieves the list of policies directly associated with the user.",
        "operationId": "list_user_policies_users__user_id__policies_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policies retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_PolicyOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Read not authorized"
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/organizations": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "User organizations",
        "description": "Retrieves the list of organizations the user is associated with.",
        "operationId": "list_user_organizations_users__user_id__organizations_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organizations retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_OrganizationOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Read not authorized"
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/tags": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "List user tags",
        "description": "Retrieves the list of tags associated with a specific user.",
        "operationId": "list_user_tags_users__user_id__tags_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tags retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_TagOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Read not authorized"
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/tags/{tag_id}": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Associate tag with user",
        "description": "Adds a specific tag to a user for categorization or special attributes.",
        "operationId": "add_tag_to_user_users__user_id__tags__tag_id__post",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_UserOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Add not authorized"
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Remove tag from user",
        "description": "Removes a specific tag from a user, deleting the associated categorization or attributes.",
        "operationId": "remove_tag_from_user_users__user_id__tags__tag_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_UserOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Delete not authorized"
          },
          "404": {
            "description": "User not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "List organizations",
        "description": "Retrieve list of organizations accessible to the user",
        "operationId": "list_organizations_organizations_get",
        "responses": {
          "200": {
            "description": "Organization list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_OrganizationOut__"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "organizations"
        ],
        "summary": "Create organization",
        "description": "Create a new organization and configure default groups/policies",
        "operationId": "create_organization_organizations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Organization created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_OrganizationOut_"
                }
              }
            }
          },
          "400": {
            "description": "An organization with this name already exists"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "You are already administrator of an organization"
          },
          "500": {
            "description": "Server error - admin function not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ]
      }
    },
    "/organizations/{org_id}": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "Organization details",
        "description": "Retrieve details of a specific organization",
        "operationId": "get_organization_organizations__org_id__get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_OrganizationOut_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Organization not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "organizations"
        ],
        "summary": "Update organization",
        "description": "Update information of an existing organization",
        "operationId": "update_organization_organizations__org_id__put",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Org Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_OrganizationOut_"
                }
              }
            }
          },
          "400": {
            "description": "An organization with this name already exists"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Organization not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "organizations"
        ],
        "summary": "Delete organization",
        "description": "Delete an existing organization and all associated data",
        "operationId": "delete_organization_organizations__org_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions or users belong to other organizations"
          },
          "404": {
            "description": "Organization not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/users/{user_id}": {
      "post": {
        "tags": [
          "organizations"
        ],
        "summary": "Add user to organization",
        "description": "Add specified user to an organization",
        "operationId": "add_user_to_organization_organizations__org_id__users__user_id__post",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Org Id"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User added to organization successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_UserOut__"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Organization or user not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "organizations"
        ],
        "summary": "Remove user from organization",
        "description": "Remove specified user from an organization",
        "operationId": "remove_user_from_organization_organizations__org_id__users__user_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Org Id"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User removed from organization successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_UserOut__"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Organization or user not found"
          },
          "409": {
            "description": "Cannot remove last administrator from the organization"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/tags": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "List organization tags",
        "description": "Retrieve all tags associated with an organization",
        "operationId": "list_organization_tags_organizations__org_id__tags_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization tags retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_TagOut__"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/policies": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "List organization policies",
        "description": "Retrieve all policies associated with an organization",
        "operationId": "list_organization_policies_organizations__org_id__policies_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization policies retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_PolicyOut__"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Organization not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/groups": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "List organization groups",
        "description": "Retrieve all groups associated with an organization",
        "operationId": "list_organization_groups_organizations__org_id__groups_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization groups retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_GroupOut__"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Organization not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/environments": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "List organization environments",
        "description": "Retrieve all environments associated with an organization",
        "operationId": "list_organization_environments_organizations__org_id__environments_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization environments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_EnvironmentOut__"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Organization not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/users": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "List organization users",
        "description": "Retrieve all users with access to a specific organization.",
        "operationId": "list_organization_users_organizations__org_id__users_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_UserOut__"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Organization not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{org_id}/elements": {
      "get": {
        "tags": [
          "organizations"
        ],
        "summary": "List organization elements",
        "description": "Retrieve all elements in an organization accessible to the user, with pagination and name filtering.",
        "operationId": "list_organization_elements_organizations__org_id__elements_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Org Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization elements retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_ElementOut__"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Organization not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "List environments",
        "description": "Lists environments filtered by name or organization (superadmins see everything, others only what they have permission to read).",
        "operationId": "list_environments_environments_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          {
            "name": "organization_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Organization Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Environment list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_EnvironmentOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "environments"
        ],
        "summary": "Create an environment",
        "description": "Creates an environment attached to an organization. Assigns an admin policy to the creator if needed.",
        "operationId": "create_environment_environments_post",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Environment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EnvironmentOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "500": {
            "description": "The 'admin' function is missing"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environment_id}": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "Environment details",
        "description": "Returns environment details if the user has access.",
        "operationId": "get_environment_environments__environment_id__get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Environment retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EnvironmentOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "environments"
        ],
        "summary": "Update an environment",
        "description": "Updates an environment if it exists and the user has permission.",
        "operationId": "update_environment_environments__environment_id__put",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Environment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EnvironmentOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "environments"
        ],
        "summary": "Delete an environment",
        "description": "Deletes an environment if the user has the required permissions.",
        "operationId": "delete_environment_environments__environment_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Environment deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environment_id}/physical-hosts": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "List physical hosts of an environment",
        "description": "Returns the list of physical hosts associated with an environment if the user has access to it.",
        "operationId": "get_environment_physical_hosts_environments__environment_id__physical_hosts_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Physical hosts list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_PhysicalHostOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/generate-name": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "Generate a random name",
        "description": "Generates a unique name from an animal or an adjective.",
        "operationId": "generate_environment_codename_environments_generate_name_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "prefix_length",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 6,
              "minimum": 0,
              "default": 0,
              "title": "Prefix Length"
            }
          },
          {
            "name": "use_adjective",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Use Adjective"
            }
          },
          {
            "name": "use_adverb",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Use Adverb"
            }
          },
          {
            "name": "suffix_length",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 6,
              "minimum": 0,
              "default": 0,
              "title": "Suffix Length"
            }
          },
          {
            "name": "separator",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 2,
              "default": "-",
              "title": "Separator"
            }
          },
          {
            "name": "style",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Style"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Name generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_str_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environment_id}/users": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "Users linked to an environment",
        "description": "Returns all users who have access to an environment via a policy (via rules).",
        "operationId": "get_environment_users_environments__environment_id__users_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_UserOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environment_id}/elements": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "List elements of an environment",
        "description": "Lists the elements of an environment with pagination and filtering by name and type.",
        "operationId": "list_elements_environments__environment_id__elements_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          {
            "name": "element_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Element type to filter (network, vm, storage_pool, volume, domain, container_node, container_cluster, stack, application)",
              "title": "Element Type"
            },
            "description": "Element type to filter (network, vm, storage_pool, volume, domain, container_node, container_cluster, stack, application)"
          }
        ],
        "responses": {
          "200": {
            "description": "Elements list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_ElementOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "400": {
            "description": "Invalid element type"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environment_id}/tags": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "List environment tags",
        "description": "Retrieves all tags associated with an environment.",
        "operationId": "list_environment_tags_environments__environment_id__tags_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tags retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_TagOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environment_id}/tags/{tag_id}": {
      "post": {
        "tags": [
          "environments"
        ],
        "summary": "Add a tag to an environment",
        "description": "Associates an existing tag with an environment.",
        "operationId": "add_tag_to_environment_environments__environment_id__tags__tag_id__post",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag added to environment successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EnvironmentOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment or tag not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "environments"
        ],
        "summary": "Remove a tag from an environment",
        "description": "Removes association between a tag and an environment.",
        "operationId": "remove_tag_from_environment_environments__environment_id__tags__tag_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag removed from environment successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EnvironmentOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment or tag not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environment_id}/networks": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "List networks of an environment",
        "description": "Lists network-type elements in an environment with pagination and name filtering.",
        "operationId": "list_networks_environments__environment_id__networks_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Networks list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_ElementOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environment_id}/vms": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "List virtual machines of an environment",
        "description": "Lists virtual machine-type elements in an environment with pagination and name filtering.",
        "operationId": "list_vms_environments__environment_id__vms_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual machines list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_ElementOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environment_id}/storage-pools": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "List storage pools of an environment",
        "description": "Lists storage pool-type elements in an environment with pagination and name filtering.",
        "operationId": "list_storage_pools_environments__environment_id__storage_pools_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Storage pools list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_ElementOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environment_id}/volumes": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "List volumes of an environment",
        "description": "Lists volume-type elements in an environment with pagination and name filtering.",
        "operationId": "list_volumes_environments__environment_id__volumes_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Volumes list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_ElementOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environment_id}/domains": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "List domains of an environment",
        "description": "Lists domain-type elements in an environment with pagination and name filtering.",
        "operationId": "list_domains_environments__environment_id__domains_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Domains list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_ElementOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environment_id}/container-nodes": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "List container nodes of an environment",
        "description": "Lists container node-type elements in an environment with pagination and name filtering.",
        "operationId": "list_container_nodes_environments__environment_id__container_nodes_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Container nodes list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_ElementOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environment_id}/container-clusters": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "List container clusters of an environment",
        "description": "Lists container cluster-type elements in an environment with pagination and name filtering.",
        "operationId": "list_container_clusters_environments__environment_id__container_clusters_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Container clusters list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_ElementOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environment_id}/stacks": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "List stacks of an environment",
        "description": "Lists stack-type elements in an environment with pagination and name filtering.",
        "operationId": "list_stacks_environments__environment_id__stacks_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stacks list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_ElementOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environment_id}/applications": {
      "get": {
        "tags": [
          "environments"
        ],
        "summary": "List applications of an environment",
        "description": "Lists application-type elements in an environment with pagination and name filtering.",
        "operationId": "list_applications_environments__environment_id__applications_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Applications list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_ElementOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "List all groups",
        "description": "Retrieves the complete list of all groups in the system (reserved for superadmins)",
        "operationId": "list_all_groups_groups_get",
        "responses": {
          "200": {
            "description": "List of all groups retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_GroupOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions - reserved for superadmins"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ]
      }
    },
    "/groups/{group_id}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Group details",
        "description": "Retrieves details of a specific group by its ID",
        "operationId": "get_group_groups__group_id__get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_GroupOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Group not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "groups"
        ],
        "summary": "Update group",
        "description": "Updates information for an existing group",
        "operationId": "update_group_groups__group_id__put",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_GroupOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Group not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Delete group",
        "description": "Deletes an existing group and all its associations",
        "operationId": "delete_group_groups__group_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions or only superadmin can delete 'admin' and 'editors' groups"
          },
          "404": {
            "description": "Group not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{organization_id}": {
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Create group",
        "description": "Creates a new group in the specified organization",
        "operationId": "create_group_groups__organization_id__post",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Organization Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_GroupOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/groups/organization/{org_id}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "List organization groups",
        "description": "Retrieves all groups belonging to a specific organization",
        "operationId": "list_groups_by_org_groups_organization__org_id__get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Org Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization group list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_GroupOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_id}/users": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "List group users",
        "description": "Retrieves all users belonging to a specific group",
        "operationId": "list_group_users_groups__group_id__users_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group user list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_UserOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Group not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_id}/users/{user_id}": {
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Assign user",
        "description": "Adds a specific user to a group",
        "operationId": "assign_user_groups__group_id__users__user_id__post",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User added to group successfully or already in group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_GroupOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Group or user not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Remove user",
        "description": "Removes a specific user from a group",
        "operationId": "remove_user_groups__group_id__users__user_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User removed from group successfully or was not in group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_GroupOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Group or user not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_id}/policy": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "List group policies",
        "description": "Retrieves all policies associated with a specific group",
        "operationId": "list_group_policies_groups__group_id__policy_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group policy list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_PolicyOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Group not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Assign policy",
        "description": "Associates a specific policy with a group",
        "operationId": "assign_policy_groups__group_id__policy_post",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          },
          {
            "name": "policy_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Policy Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy associated with group successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_GroupOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Group or policy not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_id}/policy/{policy_id}": {
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Remove policy",
        "description": "Removes a specific policy from a group",
        "operationId": "remove_policy_groups__group_id__policy__policy_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          },
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Policy Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy removed from group successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_GroupOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Group or policy not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_id}/tags": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "List group tags",
        "description": "Retrieves all tags associated with a specific group",
        "operationId": "list_group_tags_groups__group_id__tags_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group tag list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_TagOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Group not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_id}/tags/{tag_id}": {
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Add tag to group",
        "description": "Associates a specific tag with a group",
        "operationId": "add_tag_to_group_groups__group_id__tags__tag_id__post",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag added to group successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_GroupOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Group or tag not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Remove tag from group",
        "description": "Removes a specific tag from a group",
        "operationId": "remove_tag_from_group_groups__group_id__tags__tag_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag removed from group successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_GroupOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Group or tag not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/elements/{environment_id}": {
      "post": {
        "tags": [
          "elements"
        ],
        "summary": "Create an element",
        "description": "Creates an element in a given environment.",
        "operationId": "create_element_elements__environment_id__post",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Environment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElementCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Element created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_ElementOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Environment not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/elements/{element_id}": {
      "get": {
        "tags": [
          "elements"
        ],
        "summary": "Get an element",
        "description": "Returns information about a specific element.",
        "operationId": "get_element_elements__element_id__get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "element_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Element Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Element retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_ElementOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Element not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "elements"
        ],
        "summary": "Update an element",
        "description": "Modifies the information of an element.",
        "operationId": "update_element_elements__element_id__put",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "element_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Element Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElementUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Element updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_ElementOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Element not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "elements"
        ],
        "summary": "Delete an element",
        "description": "Deletes a given element.",
        "operationId": "delete_element_elements__element_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "element_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Element Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Element deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Element not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/elements/{element_id}/tags": {
      "get": {
        "tags": [
          "elements"
        ],
        "summary": "List element tags",
        "description": "Retrieves all tags associated with an element.",
        "operationId": "list_element_tags_elements__element_id__tags_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "element_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Element Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tags retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_TagOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Element not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/elements/{element_id}/tags/{tag_id}": {
      "post": {
        "tags": [
          "elements"
        ],
        "summary": "Add a tag to an element",
        "description": "Associates an existing tag with an element.",
        "operationId": "add_tag_to_element_elements__element_id__tags__tag_id__post",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "element_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Element Id"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag added to element successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_ElementOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Element or tag not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "elements"
        ],
        "summary": "Remove a tag from an element",
        "description": "Removes the association between a tag and an element.",
        "operationId": "remove_tag_from_element_elements__element_id__tags__tag_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "element_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Element Id"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag removed from element successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_ElementOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permission"
          },
          "404": {
            "description": "Element or tag not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/policies": {
      "get": {
        "tags": [
          "policies"
        ],
        "summary": "List policies",
        "description": "Retrieves the list of policies for a given organization with pagination.",
        "operationId": "list_policies_policies_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Organization Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policies retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_PolicyOut__"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "policies"
        ],
        "summary": "Create policy",
        "description": "Creates a new policy in the specified organization.",
        "operationId": "create_policy_policies_post",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Policy created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_PolicyOut_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/policies/{policy_id}": {
      "get": {
        "tags": [
          "policies"
        ],
        "summary": "Get policy",
        "description": "Retrieves details of a specific policy by its ID.",
        "operationId": "get_policy_policies__policy_id__get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Policy Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_PolicyOut_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Policy not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "policies"
        ],
        "summary": "Update policy",
        "description": "Modifies information of an existing policy.",
        "operationId": "update_policy_policies__policy_id__put",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Policy Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Policy updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_PolicyOut_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Policy not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "policies"
        ],
        "summary": "Delete policy",
        "description": "Permanently deletes an existing policy.",
        "operationId": "delete_policy_policies__policy_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Policy Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Policy not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/policies/{policy_id}/users": {
      "get": {
        "tags": [
          "policies"
        ],
        "summary": "List policy users",
        "description": "Retrieves all users associated with a specific policy.",
        "operationId": "list_policy_users_policies__policy_id__users_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Policy Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_UserOut__"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Policy not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/policies/{policy_id}/users/{user_id}": {
      "post": {
        "tags": [
          "policies"
        ],
        "summary": "Add user to policy",
        "description": "Associates a specific user with a policy to grant defined permissions.",
        "operationId": "add_user_policies__policy_id__users__user_id__post",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Policy Id"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User added to policy successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Policy or user not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "policies"
        ],
        "summary": "Remove user from policy",
        "description": "Disassociates a user from a policy, revoking associated permissions.",
        "operationId": "remove_user_policies__policy_id__users__user_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Policy Id"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User removed from policy successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Policy or user not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/policies/{policy_id}/groups": {
      "get": {
        "tags": [
          "policies"
        ],
        "summary": "List policy groups",
        "description": "Retrieves all groups associated with a specific policy.",
        "operationId": "list_policy_groups_policies__policy_id__groups_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Policy Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy groups retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_GroupOut__"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Policy not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/policies/{policy_id}/groups/{group_id}": {
      "post": {
        "tags": [
          "policies"
        ],
        "summary": "Add group to policy",
        "description": "Associates a group with a policy, granting defined permissions to all group members.",
        "operationId": "add_group_policies__policy_id__groups__group_id__post",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Policy Id"
            }
          },
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group added to policy successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Policy or group not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "policies"
        ],
        "summary": "Remove group from policy",
        "description": "Disassociates a group from a policy, revoking associated permissions from all group members.",
        "operationId": "remove_group_policies__policy_id__groups__group_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Policy Id"
            }
          },
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group removed from policy successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Policy or group not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/policies/{policy_id}/rules": {
      "get": {
        "tags": [
          "policies"
        ],
        "summary": "List policy rules",
        "description": "Retrieves all rules associated with a specific policy",
        "operationId": "list_rules_policies__policy_id__rules_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Policy Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rules retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_RuleOut__"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Policy not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/policies/{policy_id}/tags/{tag_id}": {
      "post": {
        "tags": [
          "policies"
        ],
        "summary": "Add tag to policy",
        "description": "Associates a tag with a policy, applying the policy to all resources with this tag.",
        "operationId": "add_tag_policies__policy_id__tags__tag_id__post",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Policy Id"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag added to policy successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Policy or tag not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "policies"
        ],
        "summary": "Remove tag from policy",
        "description": "Disassociates a tag from a policy, removing policy application from resources with this tag.",
        "operationId": "remove_tag_policies__policy_id__tags__tag_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Policy Id"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag removed from policy successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Policy or tag not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/rules": {
      "post": {
        "tags": [
          "rules"
        ],
        "summary": "Create a rule",
        "description": "Creates a new rule associated with a policy",
        "operationId": "create_rule_rules_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuleCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Rule created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_RuleOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Policy not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ]
      }
    },
    "/rules/{rule_id}": {
      "get": {
        "tags": [
          "rules"
        ],
        "summary": "Rule details",
        "description": "Retrieves details of a specific rule",
        "operationId": "get_rule_rules__rule_id__get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rule retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_RuleOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Rule not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "rules"
        ],
        "summary": "Update a rule",
        "description": "Updates an existing rule",
        "operationId": "update_rule_rules__rule_id__put",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuleUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rule updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_RuleOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Rule not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "rules"
        ],
        "summary": "Delete a rule",
        "description": "Deletes an existing rule",
        "operationId": "delete_rule_rules__rule_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Rule Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rule deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Rule not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/functions": {
      "get": {
        "tags": [
          "functions"
        ],
        "summary": "List functions",
        "description": "Returns all functions if the user has required permissions.",
        "operationId": "list_functions_functions_get",
        "responses": {
          "200": {
            "description": "Function list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_FunctionOut__"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ]
      }
    },
    "/functions/{function_id}": {
      "get": {
        "tags": [
          "functions"
        ],
        "summary": "Get a function",
        "description": "Returns information for a specific function.",
        "operationId": "get_function_functions__function_id__get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "function_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Function Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Function retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_FunctionOut_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Function not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "List all tags",
        "description": "Returns the list of all tags if the user has permissions on their organization.",
        "operationId": "list_tags_tags_get",
        "responses": {
          "200": {
            "description": "Tag list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_TagOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "tags"
        ],
        "summary": "Create a tag",
        "description": "Creates a new tag. The user must have permissions on a specific organization.",
        "operationId": "create_tag_tags_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tag created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_TagOut_"
                }
              }
            }
          },
          "400": {
            "description": "Tag already exists"
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ]
      }
    },
    "/tags/{tag_id}": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Get a tag",
        "description": "Returns information for a specific tag if the user has required permissions.",
        "operationId": "get_tag_tags__tag_id__get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_TagOut_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Tag not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "tags"
        ],
        "summary": "Delete a tag",
        "description": "Deletes a tag if authorized.",
        "operationId": "delete_tag_tags__tag_id__delete",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Tag not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tags/{tag_id}/groups": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Groups linked to a tag",
        "description": "Returns groups associated with a tag.",
        "operationId": "get_tag_groups_tags__tag_id__groups_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Groups retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_GroupOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Tag not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tags/{tag_id}/users": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Users linked to a tag",
        "description": "Returns users associated with a tag.",
        "operationId": "get_tag_users_tags__tag_id__users_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_UserOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Tag not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tags/{tag_id}/policies": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Policies linked to a tag",
        "description": "Returns policies associated with a tag.",
        "operationId": "get_tag_policies_tags__tag_id__policies_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policies retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_PolicyOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Tag not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tags/{tag_id}/elements": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Elements linked to a tag",
        "description": "Returns elements associated with a tag.",
        "operationId": "get_tag_elements_tags__tag_id__elements_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Elements retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_ElementOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Tag not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/tags/{tag_id}/environments": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Environments linked to a tag",
        "description": "Returns environments associated with a tag.",
        "operationId": "get_tag_environments_tags__tag_id__environments_get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Tag Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Environments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_EnvironmentOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Tag not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/audit-logs/": {
      "get": {
        "tags": [
          "audit_logs"
        ],
        "summary": "List audit logs",
        "description": "Lists audit logs with pagination and filtering by action and user_id (accessible only by superadmin).",
        "operationId": "list_audit_logs_audit_logs__get",
        "security": [
          {
            "OAuth2PasswordBearerOrKey": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Action"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_List_AuditLogOut__"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated"
          },
          "403": {
            "description": "Not authorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/coffee/": {
      "get": {
        "tags": [
          "coffee"
        ],
        "summary": "I'm a teapot",
        "description": "Returns a 418 I'm a teapot status code, as per RFC 2324.",
        "operationId": "im_a_teapot_coffee__get",
        "responses": {
          "418": {
            "description": "I'm a teapot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse_EmptyData_"
                }
              }
            }
          }
        }
      }
    },
    "/health/": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Health Check",
        "description": "Returns a 200 OK status code if the service is running. Used for Kubernetes/Docker health checks.",
        "operationId": "health_check_health__get",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service is unhealthy"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AllocationMode": {
        "type": "string",
        "enum": [
          "shared",
          "dedicated"
        ],
        "title": "AllocationMode"
      },
      "ApplicationOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "plugin_name": {
            "type": "string",
            "title": "Plugin Name"
          },
          "plugin_version": {
            "type": "string",
            "title": "Plugin Version"
          },
          "application_type": {
            "type": "string",
            "title": "Application Type"
          },
          "deployment_status": {
            "type": "string",
            "title": "Deployment Status"
          },
          "config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "element_id": {
            "type": "integer",
            "title": "Element Id"
          },
          "stack_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stack Id"
          },
          "vm_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vm Id"
          },
          "physical_host_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Physical Host Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "plugin_name",
          "plugin_version",
          "application_type",
          "deployment_status",
          "config",
          "is_active",
          "element_id",
          "stack_id",
          "vm_id",
          "physical_host_id"
        ],
        "title": "ApplicationOut"
      },
      "AuditLogOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "action": {
            "type": "string",
            "title": "Action"
          },
          "details": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "action",
          "details",
          "timestamp"
        ],
        "title": "AuditLogOut"
      },
      "BaseResponse_ElementOut_": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/ElementOut"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[ElementOut]"
      },
      "BaseResponse_EmptyData_": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/EmptyData"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[EmptyData]"
      },
      "BaseResponse_EnvironmentOut_": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/EnvironmentOut"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[EnvironmentOut]"
      },
      "BaseResponse_FunctionOut_": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/FunctionOut"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[FunctionOut]"
      },
      "BaseResponse_GroupOut_": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/GroupOut"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[GroupOut]"
      },
      "BaseResponse_List_AuditLogOut__": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/AuditLogOut"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[List[AuditLogOut]]"
      },
      "BaseResponse_List_ElementOut__": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ElementOut"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[List[ElementOut]]"
      },
      "BaseResponse_List_EnvironmentOut__": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentOut"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[List[EnvironmentOut]]"
      },
      "BaseResponse_List_FunctionOut__": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/FunctionOut"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[List[FunctionOut]]"
      },
      "BaseResponse_List_GroupOut__": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/GroupOut"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[List[GroupOut]]"
      },
      "BaseResponse_List_OrganizationOut__": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/OrganizationOut"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[List[OrganizationOut]]"
      },
      "BaseResponse_List_PhysicalHostOut__": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/PhysicalHostOut"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[List[PhysicalHostOut]]"
      },
      "BaseResponse_List_PolicyOut__": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/PolicyOut"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[List[PolicyOut]]"
      },
      "BaseResponse_List_RuleOut__": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/RuleOut"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[List[RuleOut]]"
      },
      "BaseResponse_List_TagOut__": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/TagOut"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[List[TagOut]]"
      },
      "BaseResponse_List_UserOut__": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/UserOut"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[List[UserOut]]"
      },
      "BaseResponse_OrganizationOut_": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/OrganizationOut"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[OrganizationOut]"
      },
      "BaseResponse_PolicyOut_": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/PolicyOut"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[PolicyOut]"
      },
      "BaseResponse_RuleOut_": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/RuleOut"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[RuleOut]"
      },
      "BaseResponse_TagOut_": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/TagOut"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[TagOut]"
      },
      "BaseResponse_UserOut_": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/UserOut"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[UserOut]"
      },
      "BaseResponse_str_": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "type": "string",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "BaseResponse[str]"
      },
      "Body_login_login_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "format": "password",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "format": "password",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login_login_post"
      },
      "ChangePassword": {
        "properties": {
          "old_password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Old Password"
          },
          "new_password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "New Password"
          },
          "send_email": {
            "type": "boolean",
            "title": "Send Email"
          }
        },
        "type": "object",
        "required": [
          "old_password",
          "new_password",
          "send_email"
        ],
        "title": "ChangePassword"
      },
      "ChangeSuperadmin": {
        "properties": {
          "is_superadmin": {
            "type": "boolean",
            "title": "Is Superadmin"
          }
        },
        "type": "object",
        "required": [
          "is_superadmin"
        ],
        "title": "ChangeSuperadmin"
      },
      "ComponentHealth": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "details": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "ComponentHealth",
        "description": "Health status of a system component"
      },
      "ContainerClusterOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "mode": {
            "type": "string",
            "title": "Mode"
          },
          "version": {
            "type": "string",
            "title": "Version"
          },
          "ha_enabled": {
            "type": "boolean",
            "title": "Ha Enabled"
          },
          "endpoint": {
            "type": "string",
            "title": "Endpoint"
          },
          "stack_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stack Id"
          },
          "element_id": {
            "type": "integer",
            "title": "Element Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "mode",
          "version",
          "ha_enabled",
          "endpoint",
          "stack_id",
          "element_id"
        ],
        "title": "ContainerClusterOut"
      },
      "ContainerNodeOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "cluster_id": {
            "type": "integer",
            "title": "Cluster Id"
          },
          "vm_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vm Id"
          },
          "host_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Host Id"
          },
          "role": {
            "type": "string",
            "title": "Role"
          },
          "element_id": {
            "type": "integer",
            "title": "Element Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "cluster_id",
          "vm_id",
          "host_id",
          "role",
          "element_id"
        ],
        "title": "ContainerNodeOut"
      },
      "DomainOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "element_id": {
            "type": "integer",
            "title": "Element Id"
          },
          "fqdn": {
            "type": "string",
            "title": "Fqdn"
          },
          "dnssec_enabled": {
            "type": "boolean",
            "title": "Dnssec Enabled"
          },
          "dnssec_status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dnssec Status"
          },
          "dnssec_last_signed": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dnssec Last Signed"
          },
          "dnssec_key_tag": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dnssec Key Tag"
          },
          "dnssec_algorithm": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dnssec Algorithm"
          },
          "dnssec_digest_type": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dnssec Digest Type"
          },
          "dnssec_digest": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dnssec Digest"
          }
        },
        "type": "object",
        "required": [
          "id",
          "element_id",
          "fqdn",
          "dnssec_enabled",
          "dnssec_status",
          "dnssec_last_signed",
          "dnssec_key_tag",
          "dnssec_algorithm",
          "dnssec_digest_type",
          "dnssec_digest"
        ],
        "title": "DomainOut"
      },
      "ElementCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "environment_id": {
            "type": "integer",
            "title": "Environment Id"
          },
          "subcomponent_type": {
            "type": "string",
            "title": "Subcomponent Type"
          },
          "subcomponent_data": {
            "additionalProperties": true,
            "type": "object",
            "title": "Subcomponent Data"
          }
        },
        "type": "object",
        "required": [
          "name",
          "environment_id",
          "subcomponent_type",
          "subcomponent_data"
        ],
        "title": "ElementCreate"
      },
      "ElementOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "environment_id": {
            "type": "integer",
            "title": "Environment Id"
          },
          "environment": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EnvironmentBase"
              },
              {
                "type": "null"
              }
            ]
          },
          "rules": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/RuleOut"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rules",
            "default": []
          },
          "users": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/UserOut"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Users",
            "default": []
          },
          "groups": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/GroupOut"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Groups",
            "default": []
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/TagOut"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "default": []
          },
          "environment_physical_hosts": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/PhysicalHostOut"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Environment Physical Hosts",
            "default": []
          },
          "network": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NetworkOut"
              },
              {
                "type": "null"
              }
            ]
          },
          "vm": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VMOut"
              },
              {
                "type": "null"
              }
            ]
          },
          "storage_pool": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StoragePoolOut"
              },
              {
                "type": "null"
              }
            ]
          },
          "volume": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VolumeOut"
              },
              {
                "type": "null"
              }
            ]
          },
          "domain": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DomainOut"
              },
              {
                "type": "null"
              }
            ]
          },
          "container_node": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ContainerNodeOut"
              },
              {
                "type": "null"
              }
            ]
          },
          "container_cluster": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ContainerClusterOut"
              },
              {
                "type": "null"
              }
            ]
          },
          "stack": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StackOut"
              },
              {
                "type": "null"
              }
            ]
          },
          "application": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApplicationOut"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "environment_id"
        ],
        "title": "ElementOut"
      },
      "ElementUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "environment_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Environment Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description"
        ],
        "title": "ElementUpdate"
      },
      "EmptyData": {
        "properties": {},
        "type": "object",
        "title": "EmptyData",
        "description": "Empty data structure for responses with no data"
      },
      "EnvironmentBase": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "organization_id": {
            "type": "integer",
            "title": "Organization Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "organization_id"
        ],
        "title": "EnvironmentBase"
      },
      "EnvironmentCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "organization_id": {
            "type": "integer",
            "title": "Organization Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "organization_id"
        ],
        "title": "EnvironmentCreate"
      },
      "EnvironmentOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "organization_id": {
            "type": "integer",
            "title": "Organization Id"
          },
          "organization": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationOut"
              },
              {
                "type": "null"
              }
            ]
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/ElementOut"
            },
            "type": "array",
            "title": "Elements"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/RuleOut"
            },
            "type": "array",
            "title": "Rules"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/UserOut"
            },
            "type": "array",
            "title": "Users"
          },
          "groups_with_access": {
            "items": {
              "$ref": "#/components/schemas/GroupOut"
            },
            "type": "array",
            "title": "Groups With Access"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagOut"
            },
            "type": "array",
            "title": "Tags"
          },
          "physical_hosts": {
            "items": {
              "$ref": "#/components/schemas/PhysicalHostOut"
            },
            "type": "array",
            "title": "Physical Hosts"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "organization_id"
        ],
        "title": "EnvironmentOut"
      },
      "FunctionOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description"
        ],
        "title": "FunctionOut"
      },
      "GroupCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "organization_id": {
            "type": "integer",
            "title": "Organization Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "organization_id"
        ],
        "title": "GroupCreate"
      },
      "GroupOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagOut"
            },
            "type": "array",
            "title": "Tags",
            "default": []
          },
          "organization_id": {
            "type": "integer",
            "title": "Organization Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "organization_id"
        ],
        "title": "GroupOut"
      },
      "GroupUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "title": "GroupUpdate"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthComponents": {
        "properties": {
          "database": {
            "$ref": "#/components/schemas/ComponentHealth"
          }
        },
        "type": "object",
        "required": [
          "database"
        ],
        "title": "HealthComponents",
        "description": "Collection of system component health statuses"
      },
      "HealthData": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "components": {
            "$ref": "#/components/schemas/HealthComponents"
          }
        },
        "type": "object",
        "required": [
          "status",
          "components"
        ],
        "title": "HealthData",
        "description": "Health check data structure"
      },
      "HealthResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/HealthData"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "HealthResponse",
        "description": "Response schema for health check endpoint"
      },
      "HypervisorType": {
        "type": "string",
        "enum": [
          "none",
          "libvirt",
          "proxmox"
        ],
        "title": "HypervisorType"
      },
      "LoginData": {
        "properties": {
          "token_type": {
            "type": "string",
            "title": "Token Type"
          }
        },
        "type": "object",
        "required": [
          "token_type"
        ],
        "title": "LoginData",
        "description": "Data structure for login response"
      },
      "LoginResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/LoginData"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "LoginResponse",
        "description": "Response schema for login endpoint"
      },
      "LogoutResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/EmptyData"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "LogoutResponse",
        "description": "Response schema for logout endpoint"
      },
      "MeResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/UserOut"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "MeResponse",
        "description": "Response schema for me/profile endpoint"
      },
      "NetworkOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "cidr": {
            "type": "string",
            "title": "Cidr"
          },
          "vlan": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vlan"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "environment_scoped": {
            "type": "boolean",
            "title": "Environment Scoped"
          },
          "element_id": {
            "type": "integer",
            "title": "Element Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "cidr",
          "vlan",
          "type",
          "environment_scoped",
          "element_id"
        ],
        "title": "NetworkOut"
      },
      "OrganizationCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 80,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1024
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "OrganizationCreate"
      },
      "OrganizationOut": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 80,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1024
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/UserOut"
            },
            "type": "array",
            "title": "Users",
            "default": []
          },
          "environments": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentOut"
            },
            "type": "array",
            "title": "Environments",
            "default": []
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/GroupOut"
            },
            "type": "array",
            "title": "Groups",
            "default": []
          },
          "policies": {
            "items": {
              "$ref": "#/components/schemas/PolicyOut"
            },
            "type": "array",
            "title": "Policies",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "name",
          "id"
        ],
        "title": "OrganizationOut"
      },
      "OrganizationUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 80,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1024
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "OrganizationUpdate"
      },
      "PasswordReset": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "new_password": {
            "type": "string",
            "title": "New Password"
          }
        },
        "type": "object",
        "required": [
          "token",
          "new_password"
        ],
        "title": "PasswordReset"
      },
      "PasswordResetRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "PasswordResetRequest"
      },
      "PasswordResetResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "PasswordResetResponse",
        "description": "Response schema for password reset endpoints"
      },
      "PhysicalHostOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "fqdn": {
            "type": "string",
            "title": "Fqdn"
          },
          "ip_mgmt": {
            "type": "string",
            "title": "Ip Mgmt"
          },
          "cpu_threads": {
            "type": "integer",
            "title": "Cpu Threads"
          },
          "ram_mb": {
            "type": "integer",
            "title": "Ram Mb"
          },
          "hypervisor_type": {
            "$ref": "#/components/schemas/HypervisorType"
          },
          "is_schedulable": {
            "type": "boolean",
            "title": "Is Schedulable"
          },
          "allocation_mode": {
            "$ref": "#/components/schemas/AllocationMode"
          },
          "dedicated_environment_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dedicated Environment Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "fqdn",
          "ip_mgmt",
          "cpu_threads",
          "ram_mb",
          "hypervisor_type",
          "is_schedulable",
          "allocation_mode"
        ],
        "title": "PhysicalHostOut"
      },
      "PolicyCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "organization_id": {
            "type": "integer",
            "title": "Organization Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "organization_id"
        ],
        "title": "PolicyCreate"
      },
      "PolicyOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "organization_id": {
            "type": "integer",
            "title": "Organization Id"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagOut"
            },
            "type": "array",
            "title": "Tags",
            "default": []
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/UserOut"
            },
            "type": "array",
            "title": "Users",
            "default": []
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/GroupOut"
            },
            "type": "array",
            "title": "Groups",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "organization_id"
        ],
        "title": "PolicyOut"
      },
      "PolicyUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "title": "PolicyUpdate"
      },
      "RefreshTokenData": {
        "properties": {
          "token_type": {
            "type": "string",
            "title": "Token Type"
          }
        },
        "type": "object",
        "required": [
          "token_type"
        ],
        "title": "RefreshTokenData",
        "description": "Data structure for refresh token response"
      },
      "RefreshTokenResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "data": {
            "$ref": "#/components/schemas/RefreshTokenData"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "title": "RefreshTokenResponse",
        "description": "Response schema for refresh token endpoint"
      },
      "RuleCreate": {
        "properties": {
          "policy_id": {
            "type": "integer",
            "title": "Policy Id"
          },
          "function_id": {
            "type": "integer",
            "title": "Function Id"
          },
          "environment_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Environment Id"
          },
          "element_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Element Id"
          },
          "access_schedule": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Access Schedule"
          }
        },
        "type": "object",
        "required": [
          "policy_id",
          "function_id"
        ],
        "title": "RuleCreate"
      },
      "RuleOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "function_id": {
            "type": "integer",
            "title": "Function Id"
          },
          "environment_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Environment Id"
          },
          "element_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Element Id"
          },
          "access_schedule": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Access Schedule"
          }
        },
        "type": "object",
        "required": [
          "id",
          "function_id",
          "environment_id",
          "element_id",
          "access_schedule"
        ],
        "title": "RuleOut"
      },
      "RuleUpdate": {
        "properties": {
          "function_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Function Id"
          },
          "environment_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Environment Id"
          },
          "element_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Element Id"
          },
          "access_schedule": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Access Schedule"
          }
        },
        "type": "object",
        "title": "RuleUpdate"
      },
      "StackOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "element_id": {
            "type": "integer",
            "title": "Element Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "element_id"
        ],
        "title": "StackOut"
      },
      "StoragePoolOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "parameters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameters"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          },
          "element_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Element Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "parameters",
          "scope",
          "element_id"
        ],
        "title": "StoragePoolOut"
      },
      "TagCreate": {
        "properties": {
          "value": {
            "type": "string",
            "maxLength": 80,
            "title": "Value"
          },
          "organization_id": {
            "type": "integer",
            "title": "Organization Id"
          }
        },
        "type": "object",
        "required": [
          "value",
          "organization_id"
        ],
        "title": "TagCreate"
      },
      "TagOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "value": {
            "type": "string",
            "title": "Value"
          }
        },
        "type": "object",
        "required": [
          "id",
          "value"
        ],
        "title": "TagOut"
      },
      "UserCreate": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "first_name": {
            "type": "string",
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "title": "Last Name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "username",
          "first_name",
          "last_name",
          "email",
          "password"
        ],
        "title": "UserCreate"
      },
      "UserOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "first_name": {
            "type": "string",
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "title": "Last Name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "is_superadmin": {
            "type": "boolean",
            "title": "Is Superadmin"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagOut"
            },
            "type": "array",
            "title": "Tags",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "username",
          "first_name",
          "last_name",
          "email",
          "is_superadmin"
        ],
        "title": "UserOut"
      },
      "UserUpdate": {
        "properties": {
          "first_name": {
            "type": "string",
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "title": "Last Name"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "username",
          "email"
        ],
        "title": "UserUpdate"
      },
      "VMOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "host_id": {
            "type": "integer",
            "title": "Host Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "vcpu": {
            "type": "integer",
            "title": "Vcpu"
          },
          "ram_mb": {
            "type": "integer",
            "title": "Ram Mb"
          },
          "disk_gb": {
            "type": "integer",
            "title": "Disk Gb"
          },
          "os_image": {
            "type": "string",
            "title": "Os Image"
          },
          "stack_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stack Id"
          },
          "element_id": {
            "type": "integer",
            "title": "Element Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "host_id",
          "name",
          "vcpu",
          "ram_mb",
          "disk_gb",
          "os_image",
          "stack_id",
          "element_id"
        ],
        "title": "VMOut"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VolumeOut": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "pool_id": {
            "type": "integer",
            "title": "Pool Id"
          },
          "size_gb": {
            "type": "integer",
            "title": "Size Gb"
          },
          "mode": {
            "type": "string",
            "title": "Mode"
          },
          "element_id": {
            "type": "integer",
            "title": "Element Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "pool_id",
          "size_gb",
          "mode",
          "element_id"
        ],
        "title": "VolumeOut"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearerOrKey": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/login"
          }
        }
      }
    }
  }
}
